/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 53619.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 2.0], [1.0, 3.0], [1.1, 101.0], [1.2, 201.0], [1.3, 202.0], [1.4, 203.0], [1.5, 301.0], [1.6, 301.0], [1.7, 302.0], [1.8, 303.0], [1.9, 303.0], [2.0, 401.0], [2.1, 402.0], [2.2, 404.0], [2.3, 405.0], [2.4, 406.0], [2.5, 502.0], [2.6, 503.0], [2.7, 504.0], [2.8, 506.0], [2.9, 702.0], [3.0, 703.0], [3.1, 703.0], [3.2, 705.0], [3.3, 705.0], [3.4, 706.0], [3.5, 708.0], [3.6, 719.0], [3.7, 1083.0], [3.8, 1101.0], [3.9, 1103.0], [4.0, 1103.0], [4.1, 1104.0], [4.2, 1104.0], [4.3, 1104.0], [4.4, 1104.0], [4.5, 1104.0], [4.6, 1105.0], [4.7, 1105.0], [4.8, 1105.0], [4.9, 1105.0], [5.0, 1105.0], [5.1, 1105.0], [5.2, 1106.0], [5.3, 1106.0], [5.4, 1106.0], [5.5, 1106.0], [5.6, 1106.0], [5.7, 1107.0], [5.8, 1107.0], [5.9, 1109.0], [6.0, 1110.0], [6.1, 1116.0], [6.2, 1127.0], [6.3, 1178.0], [6.4, 1225.0], [6.5, 1266.0], [6.6, 1319.0], [6.7, 1393.0], [6.8, 1490.0], [6.9, 1610.0], [7.0, 1737.0], [7.1, 1896.0], [7.2, 1903.0], [7.3, 1904.0], [7.4, 1905.0], [7.5, 1906.0], [7.6, 1906.0], [7.7, 1907.0], [7.8, 1907.0], [7.9, 1907.0], [8.0, 1908.0], [8.1, 1908.0], [8.2, 1908.0], [8.3, 1909.0], [8.4, 1910.0], [8.5, 1911.0], [8.6, 1946.0], [8.7, 2069.0], [8.8, 2200.0], [8.9, 2396.0], [9.0, 2656.0], [9.1, 2719.0], [9.2, 2885.0], [9.3, 2966.0], [9.4, 3091.0], [9.5, 3424.0], [9.6, 3507.0], [9.7, 3508.0], [9.8, 3509.0], [9.9, 3509.0], [10.0, 3511.0], [10.1, 3606.0], [10.2, 3856.0], [10.3, 3873.0], [10.4, 3879.0], [10.5, 4056.0], [10.6, 4137.0], [10.7, 4222.0], [10.8, 4243.0], [10.9, 4299.0], [11.0, 4554.0], [11.1, 4768.0], [11.2, 4958.0], [11.3, 5109.0], [11.4, 5183.0], [11.5, 5273.0], [11.6, 5298.0], [11.7, 5398.0], [11.8, 5438.0], [11.9, 5538.0], [12.0, 5551.0], [12.1, 5648.0], [12.2, 5649.0], [12.3, 5709.0], [12.4, 5710.0], [12.5, 5720.0], [12.6, 5783.0], [12.7, 5806.0], [12.8, 5833.0], [12.9, 5881.0], [13.0, 5882.0], [13.1, 5894.0], [13.2, 5917.0], [13.3, 5960.0], [13.4, 5964.0], [13.5, 6021.0], [13.6, 6038.0], [13.7, 6124.0], [13.8, 6154.0], [13.9, 6306.0], [14.0, 6318.0], [14.1, 6384.0], [14.2, 6398.0], [14.3, 6450.0], [14.4, 6544.0], [14.5, 6550.0], [14.6, 6554.0], [14.7, 6626.0], [14.8, 6630.0], [14.9, 6635.0], [15.0, 6652.0], [15.1, 6671.0], [15.2, 6703.0], [15.3, 6708.0], [15.4, 6719.0], [15.5, 6902.0], [15.6, 6989.0], [15.7, 7013.0], [15.8, 7026.0], [15.9, 7031.0], [16.0, 7073.0], [16.1, 7088.0], [16.2, 7116.0], [16.3, 7122.0], [16.4, 7237.0], [16.5, 7300.0], [16.6, 7340.0], [16.7, 7381.0], [16.8, 7404.0], [16.9, 7470.0], [17.0, 7471.0], [17.1, 7478.0], [17.2, 7498.0], [17.3, 7501.0], [17.4, 7587.0], [17.5, 7589.0], [17.6, 7595.0], [17.7, 7620.0], [17.8, 7663.0], [17.9, 7669.0], [18.0, 7671.0], [18.1, 7672.0], [18.2, 7692.0], [18.3, 7695.0], [18.4, 7715.0], [18.5, 7725.0], [18.6, 7744.0], [18.7, 7746.0], [18.8, 7757.0], [18.9, 7773.0], [19.0, 7774.0], [19.1, 7777.0], [19.2, 7781.0], [19.3, 7790.0], [19.4, 7798.0], [19.5, 7800.0], [19.6, 7801.0], [19.7, 7801.0], [19.8, 7802.0], [19.9, 7802.0], [20.0, 7803.0], [20.1, 7805.0], [20.2, 7806.0], [20.3, 7812.0], [20.4, 7814.0], [20.5, 7815.0], [20.6, 7817.0], [20.7, 7819.0], [20.8, 7821.0], [20.9, 7823.0], [21.0, 7825.0], [21.1, 7826.0], [21.2, 7827.0], [21.3, 7831.0], [21.4, 7832.0], [21.5, 7839.0], [21.6, 7842.0], [21.7, 7844.0], [21.8, 7845.0], [21.9, 7848.0], [22.0, 7855.0], [22.1, 7861.0], [22.2, 7863.0], [22.3, 7879.0], [22.4, 7887.0], [22.5, 7897.0], [22.6, 7901.0], [22.7, 7911.0], [22.8, 7936.0], [22.9, 7952.0], [23.0, 7959.0], [23.1, 7979.0], [23.2, 7980.0], [23.3, 7988.0], [23.4, 7991.0], [23.5, 7995.0], [23.6, 7999.0], [23.7, 8014.0], [23.8, 8014.0], [23.9, 8016.0], [24.0, 8050.0], [24.1, 8052.0], [24.2, 8055.0], [24.3, 8058.0], [24.4, 8109.0], [24.5, 8118.0], [24.6, 8147.0], [24.7, 8151.0], [24.8, 8194.0], [24.9, 8240.0], [25.0, 8245.0], [25.1, 8253.0], [25.2, 8254.0], [25.3, 8283.0], [25.4, 8286.0], [25.5, 8288.0], [25.6, 8340.0], [25.7, 8386.0], [25.8, 8388.0], [25.9, 8393.0], [26.0, 8409.0], [26.1, 8418.0], [26.2, 8421.0], [26.3, 8421.0], [26.4, 8423.0], [26.5, 8436.0], [26.6, 8448.0], [26.7, 8453.0], [26.8, 8456.0], [26.9, 8459.0], [27.0, 8500.0], [27.1, 8501.0], [27.2, 8509.0], [27.3, 8518.0], [27.4, 8532.0], [27.5, 8547.0], [27.6, 8550.0], [27.7, 8560.0], [27.8, 8599.0], [27.9, 8601.0], [28.0, 8603.0], [28.1, 8638.0], [28.2, 8645.0], [28.3, 8663.0], [28.4, 8687.0], [28.5, 8730.0], [28.6, 8733.0], [28.7, 8748.0], [28.8, 8779.0], [28.9, 8781.0], [29.0, 8815.0], [29.1, 8817.0], [29.2, 8825.0], [29.3, 8826.0], [29.4, 8864.0], [29.5, 8866.0], [29.6, 8890.0], [29.7, 8897.0], [29.8, 8906.0], [29.9, 8906.0], [30.0, 8920.0], [30.1, 8974.0], [30.2, 8990.0], [30.3, 9009.0], [30.4, 9055.0], [30.5, 9088.0], [30.6, 9091.0], [30.7, 9119.0], [30.8, 9121.0], [30.9, 9127.0], [31.0, 9147.0], [31.1, 9148.0], [31.2, 9154.0], [31.3, 9163.0], [31.4, 9175.0], [31.5, 9179.0], [31.6, 9204.0], [31.7, 9205.0], [31.8, 9217.0], [31.9, 9228.0], [32.0, 9236.0], [32.1, 9238.0], [32.2, 9242.0], [32.3, 9251.0], [32.4, 9252.0], [32.5, 9255.0], [32.6, 9263.0], [32.7, 9265.0], [32.8, 9266.0], [32.9, 9270.0], [33.0, 9270.0], [33.1, 9272.0], [33.2, 9274.0], [33.3, 9277.0], [33.4, 9277.0], [33.5, 9295.0], [33.6, 9298.0], [33.7, 9318.0], [33.8, 9321.0], [33.9, 9322.0], [34.0, 9328.0], [34.1, 9336.0], [34.2, 9342.0], [34.3, 9355.0], [34.4, 9363.0], [34.5, 9365.0], [34.6, 9366.0], [34.7, 9370.0], [34.8, 9373.0], [34.9, 9375.0], [35.0, 9389.0], [35.1, 9399.0], [35.2, 9402.0], [35.3, 9415.0], [35.4, 9415.0], [35.5, 9416.0], [35.6, 9419.0], [35.7, 9423.0], [35.8, 9434.0], [35.9, 9438.0], [36.0, 9439.0], [36.1, 9440.0], [36.2, 9440.0], [36.3, 9442.0], [36.4, 9465.0], [36.5, 9467.0], [36.6, 9469.0], [36.7, 9471.0], [36.8, 9475.0], [36.9, 9476.0], [37.0, 9476.0], [37.1, 9485.0], [37.2, 9487.0], [37.3, 9534.0], [37.4, 9592.0], [37.5, 9681.0], [37.6, 9686.0], [37.7, 9719.0], [37.8, 9772.0], [37.9, 9789.0], [38.0, 9886.0], [38.1, 9925.0], [38.2, 9941.0], [38.3, 9962.0], [38.4, 9971.0], [38.5, 9978.0], [38.6, 9987.0], [38.7, 9997.0], [38.8, 10003.0], [38.9, 10030.0], [39.0, 10032.0], [39.1, 10036.0], [39.2, 10041.0], [39.3, 10044.0], [39.4, 10052.0], [39.5, 10066.0], [39.6, 10069.0], [39.7, 10071.0], [39.8, 10072.0], [39.9, 10078.0], [40.0, 10080.0], [40.1, 10098.0], [40.2, 10104.0], [40.3, 10107.0], [40.4, 10108.0], [40.5, 10123.0], [40.6, 10126.0], [40.7, 10140.0], [40.8, 10142.0], [40.9, 10144.0], [41.0, 10145.0], [41.1, 10148.0], [41.2, 10150.0], [41.3, 10160.0], [41.4, 10166.0], [41.5, 10167.0], [41.6, 10171.0], [41.7, 10172.0], [41.8, 10176.0], [41.9, 10181.0], [42.0, 10184.0], [42.1, 10185.0], [42.2, 10186.0], [42.3, 10189.0], [42.4, 10190.0], [42.5, 10192.0], [42.6, 10196.0], [42.7, 10198.0], [42.8, 10214.0], [42.9, 10216.0], [43.0, 10218.0], [43.1, 10218.0], [43.2, 10221.0], [43.3, 10227.0], [43.4, 10231.0], [43.5, 10243.0], [43.6, 10245.0], [43.7, 10262.0], [43.8, 10273.0], [43.9, 10274.0], [44.0, 10275.0], [44.1, 10280.0], [44.2, 10287.0], [44.3, 10316.0], [44.4, 10319.0], [44.5, 10321.0], [44.6, 10328.0], [44.7, 10338.0], [44.8, 10349.0], [44.9, 10362.0], [45.0, 10363.0], [45.1, 10366.0], [45.2, 10372.0], [45.3, 10404.0], [45.4, 10409.0], [45.5, 10417.0], [45.6, 10422.0], [45.7, 10455.0], [45.8, 10465.0], [45.9, 10467.0], [46.0, 10468.0], [46.1, 10469.0], [46.2, 10496.0], [46.3, 10531.0], [46.4, 10533.0], [46.5, 10539.0], [46.6, 10539.0], [46.7, 10543.0], [46.8, 10552.0], [46.9, 10579.0], [47.0, 10597.0], [47.1, 10598.0], [47.2, 10612.0], [47.3, 10631.0], [47.4, 10634.0], [47.5, 10663.0], [47.6, 10677.0], [47.7, 10678.0], [47.8, 10691.0], [47.9, 10698.0], [48.0, 10701.0], [48.1, 10703.0], [48.2, 10715.0], [48.3, 10740.0], [48.4, 10767.0], [48.5, 10780.0], [48.6, 10782.0], [48.7, 10786.0], [48.8, 10789.0], [48.9, 10862.0], [49.0, 10876.0], [49.1, 10974.0], [49.2, 11000.0], [49.3, 11018.0], [49.4, 11056.0], [49.5, 11057.0], [49.6, 11123.0], [49.7, 11124.0], [49.8, 11126.0], [49.9, 11131.0], [50.0, 11151.0], [50.1, 11157.0], [50.2, 11165.0], [50.3, 11169.0], [50.4, 11184.0], [50.5, 11236.0], [50.6, 11253.0], [50.7, 11270.0], [50.8, 11318.0], [50.9, 11369.0], [51.0, 11371.0], [51.1, 11373.0], [51.2, 11385.0], [51.3, 11386.0], [51.4, 11387.0], [51.5, 11480.0], [51.6, 11609.0], [51.7, 11627.0], [51.8, 11628.0], [51.9, 11711.0], [52.0, 11796.0], [52.1, 11822.0], [52.2, 11859.0], [52.3, 11923.0], [52.4, 11969.0], [52.5, 12016.0], [52.6, 12065.0], [52.7, 12087.0], [52.8, 12110.0], [52.9, 12316.0], [53.0, 12427.0], [53.1, 12492.0], [53.2, 12578.0], [53.3, 12696.0], [53.4, 12735.0], [53.5, 12963.0], [53.6, 12981.0], [53.7, 13001.0], [53.8, 13060.0], [53.9, 13108.0], [54.0, 13109.0], [54.1, 13111.0], [54.2, 13122.0], [54.3, 13226.0], [54.4, 13268.0], [54.5, 13289.0], [54.6, 13295.0], [54.7, 13313.0], [54.8, 13344.0], [54.9, 13345.0], [55.0, 13367.0], [55.1, 13371.0], [55.2, 13377.0], [55.3, 13379.0], [55.4, 13411.0], [55.5, 13416.0], [55.6, 13418.0], [55.7, 13427.0], [55.8, 13437.0], [55.9, 13444.0], [56.0, 13446.0], [56.1, 13452.0], [56.2, 13453.0], [56.3, 13454.0], [56.4, 13466.0], [56.5, 13467.0], [56.6, 13477.0], [56.7, 13493.0], [56.8, 13499.0], [56.9, 13500.0], [57.0, 13501.0], [57.1, 13504.0], [57.2, 13506.0], [57.3, 13514.0], [57.4, 13516.0], [57.5, 13521.0], [57.6, 13526.0], [57.7, 13527.0], [57.8, 13529.0], [57.9, 13530.0], [58.0, 13531.0], [58.1, 13532.0], [58.2, 13540.0], [58.3, 13541.0], [58.4, 13542.0], [58.5, 13544.0], [58.6, 13550.0], [58.7, 13552.0], [58.8, 13555.0], [58.9, 13566.0], [59.0, 13589.0], [59.1, 13593.0], [59.2, 13594.0], [59.3, 13605.0], [59.4, 13614.0], [59.5, 13625.0], [59.6, 13641.0], [59.7, 13648.0], [59.8, 13651.0], [59.9, 13652.0], [60.0, 13655.0], [60.1, 13667.0], [60.2, 13679.0], [60.3, 13685.0], [60.4, 13694.0], [60.5, 13701.0], [60.6, 13715.0], [60.7, 13723.0], [60.8, 13748.0], [60.9, 13752.0], [61.0, 13763.0], [61.1, 13785.0], [61.2, 13798.0], [61.3, 13799.0], [61.4, 13822.0], [61.5, 13880.0], [61.6, 13924.0], [61.7, 13933.0], [61.8, 14004.0], [61.9, 14005.0], [62.0, 14014.0], [62.1, 14016.0], [62.2, 14052.0], [62.3, 14088.0], [62.4, 14141.0], [62.5, 14196.0], [62.6, 14197.0], [62.7, 14226.0], [62.8, 14340.0], [62.9, 14657.0], [63.0, 14878.0], [63.1, 15265.0], [63.2, 15544.0], [63.3, 15695.0], [63.4, 15939.0], [63.5, 16306.0], [63.6, 16644.0], [63.7, 16773.0], [63.8, 16849.0], [63.9, 16870.0], [64.0, 16973.0], [64.1, 17043.0], [64.2, 17123.0], [64.3, 17224.0], [64.4, 17306.0], [64.5, 17437.0], [64.6, 17541.0], [64.7, 17729.0], [64.8, 17757.0], [64.9, 17871.0], [65.0, 17932.0], [65.1, 18001.0], [65.2, 18264.0], [65.3, 18315.0], [65.4, 18414.0], [65.5, 18500.0], [65.6, 18585.0], [65.7, 18682.0], [65.8, 18793.0], [65.9, 18904.0], [66.0, 19001.0], [66.1, 19084.0], [66.2, 19194.0], [66.3, 19339.0], [66.4, 19505.0], [66.5, 19510.0], [66.6, 19511.0], [66.7, 19512.0], [66.8, 19525.0], [66.9, 19693.0], [67.0, 19785.0], [67.1, 19943.0], [67.2, 20300.0], [67.3, 20516.0], [67.4, 20617.0], [67.5, 20738.0], [67.6, 20853.0], [67.7, 21000.0], [67.8, 21156.0], [67.9, 21218.0], [68.0, 21349.0], [68.1, 21363.0], [68.2, 21408.0], [68.3, 21423.0], [68.4, 21461.0], [68.5, 21478.0], [68.6, 21537.0], [68.7, 21559.0], [68.8, 21737.0], [68.9, 21794.0], [69.0, 21828.0], [69.1, 21919.0], [69.2, 21969.0], [69.3, 22021.0], [69.4, 22093.0], [69.5, 22139.0], [69.6, 22222.0], [69.7, 22228.0], [69.8, 22280.0], [69.9, 22334.0], [70.0, 22441.0], [70.1, 22594.0], [70.2, 22664.0], [70.3, 22704.0], [70.4, 22751.0], [70.5, 22788.0], [70.6, 22814.0], [70.7, 22851.0], [70.8, 22868.0], [70.9, 22953.0], [71.0, 22974.0], [71.1, 23008.0], [71.2, 23041.0], [71.3, 23050.0], [71.4, 23101.0], [71.5, 23145.0], [71.6, 23167.0], [71.7, 23265.0], [71.8, 23410.0], [71.9, 23418.0], [72.0, 23438.0], [72.1, 23515.0], [72.2, 23529.0], [72.3, 23549.0], [72.4, 23562.0], [72.5, 23601.0], [72.6, 23613.0], [72.7, 23623.0], [72.8, 23641.0], [72.9, 23661.0], [73.0, 23668.0], [73.1, 23682.0], [73.2, 23715.0], [73.3, 23743.0], [73.4, 23750.0], [73.5, 23771.0], [73.6, 23781.0], [73.7, 23785.0], [73.8, 23813.0], [73.9, 23821.0], [74.0, 23834.0], [74.1, 23848.0], [74.2, 23915.0], [74.3, 23989.0], [74.4, 24068.0], [74.5, 24087.0], [74.6, 24120.0], [74.7, 24122.0], [74.8, 24137.0], [74.9, 24166.0], [75.0, 24202.0], [75.1, 24260.0], [75.2, 24275.0], [75.3, 24331.0], [75.4, 24416.0], [75.5, 24519.0], [75.6, 24617.0], [75.7, 24757.0], [75.8, 24882.0], [75.9, 25074.0], [76.0, 25141.0], [76.1, 25208.0], [76.2, 25242.0], [76.3, 25362.0], [76.4, 25385.0], [76.5, 25581.0], [76.6, 25683.0], [76.7, 25749.0], [76.8, 25776.0], [76.9, 25857.0], [77.0, 25906.0], [77.1, 25909.0], [77.2, 25910.0], [77.3, 25912.0], [77.4, 25913.0], [77.5, 25919.0], [77.6, 25972.0], [77.7, 26018.0], [77.8, 26099.0], [77.9, 26194.0], [78.0, 26259.0], [78.1, 26295.0], [78.2, 26372.0], [78.3, 26441.0], [78.4, 26527.0], [78.5, 26575.0], [78.6, 26593.0], [78.7, 26639.0], [78.8, 26698.0], [78.9, 26777.0], [79.0, 26814.0], [79.1, 26871.0], [79.2, 26964.0], [79.3, 27008.0], [79.4, 27014.0], [79.5, 27060.0], [79.6, 27070.0], [79.7, 27099.0], [79.8, 27121.0], [79.9, 27132.0], [80.0, 27175.0], [80.1, 27180.0], [80.2, 27193.0], [80.3, 27208.0], [80.4, 27221.0], [80.5, 27243.0], [80.6, 27259.0], [80.7, 27289.0], [80.8, 27309.0], [80.9, 27322.0], [81.0, 27381.0], [81.1, 27394.0], [81.2, 27420.0], [81.3, 27442.0], [81.4, 27477.0], [81.5, 27533.0], [81.6, 27579.0], [81.7, 27600.0], [81.8, 27614.0], [81.9, 27686.0], [82.0, 27747.0], [82.1, 27805.0], [82.2, 27879.0], [82.3, 27955.0], [82.4, 27988.0], [82.5, 28054.0], [82.6, 28135.0], [82.7, 28217.0], [82.8, 28241.0], [82.9, 28281.0], [83.0, 28320.0], [83.1, 28367.0], [83.2, 28404.0], [83.3, 28484.0], [83.4, 28505.0], [83.5, 28595.0], [83.6, 28699.0], [83.7, 28744.0], [83.8, 28816.0], [83.9, 28945.0], [84.0, 29021.0], [84.1, 29188.0], [84.2, 29323.0], [84.3, 29392.0], [84.4, 29434.0], [84.5, 29526.0], [84.6, 29695.0], [84.7, 29736.0], [84.8, 29858.0], [84.9, 29962.0], [85.0, 30128.0], [85.1, 30283.0], [85.2, 30384.0], [85.3, 30446.0], [85.4, 30500.0], [85.5, 30515.0], [85.6, 30570.0], [85.7, 30600.0], [85.8, 30616.0], [85.9, 30639.0], [86.0, 30705.0], [86.1, 30718.0], [86.2, 30744.0], [86.3, 30763.0], [86.4, 30818.0], [86.5, 30907.0], [86.6, 31045.0], [86.7, 31060.0], [86.8, 31164.0], [86.9, 31267.0], [87.0, 31376.0], [87.1, 31480.0], [87.2, 31540.0], [87.3, 31689.0], [87.4, 31770.0], [87.5, 31881.0], [87.6, 32018.0], [87.7, 32254.0], [87.8, 32400.0], [87.9, 32509.0], [88.0, 32745.0], [88.1, 32845.0], [88.2, 32850.0], [88.3, 32873.0], [88.4, 33009.0], [88.5, 33181.0], [88.6, 33301.0], [88.7, 33333.0], [88.8, 33358.0], [88.9, 33377.0], [89.0, 33469.0], [89.1, 33522.0], [89.2, 33689.0], [89.3, 33883.0], [89.4, 33962.0], [89.5, 34025.0], [89.6, 34102.0], [89.7, 34121.0], [89.8, 34224.0], [89.9, 34344.0], [90.0, 34404.0], [90.1, 34449.0], [90.2, 34508.0], [90.3, 34632.0], [90.4, 34687.0], [90.5, 34707.0], [90.6, 34737.0], [90.7, 34809.0], [90.8, 34878.0], [90.9, 34962.0], [91.0, 34988.0], [91.1, 35003.0], [91.2, 35020.0], [91.3, 35032.0], [91.4, 35110.0], [91.5, 35116.0], [91.6, 35144.0], [91.7, 35181.0], [91.8, 35194.0], [91.9, 35251.0], [92.0, 35353.0], [92.1, 35425.0], [92.2, 35450.0], [92.3, 35490.0], [92.4, 35618.0], [92.5, 35730.0], [92.6, 35911.0], [92.7, 36014.0], [92.8, 36128.0], [92.9, 36295.0], [93.0, 36411.0], [93.1, 36465.0], [93.2, 36571.0], [93.3, 36614.0], [93.4, 36648.0], [93.5, 36753.0], [93.6, 36776.0], [93.7, 36779.0], [93.8, 36978.0], [93.9, 37082.0], [94.0, 37268.0], [94.1, 37433.0], [94.2, 37550.0], [94.3, 37932.0], [94.4, 38110.0], [94.5, 38193.0], [94.6, 38259.0], [94.7, 38379.0], [94.8, 38545.0], [94.9, 38631.0], [95.0, 38674.0], [95.1, 38832.0], [95.2, 38901.0], [95.3, 38995.0], [95.4, 39011.0], [95.5, 39050.0], [95.6, 39115.0], [95.7, 39190.0], [95.8, 39207.0], [95.9, 39244.0], [96.0, 39328.0], [96.1, 39375.0], [96.2, 39428.0], [96.3, 39522.0], [96.4, 39709.0], [96.5, 39840.0], [96.6, 39949.0], [96.7, 40001.0], [96.8, 40162.0], [96.9, 40426.0], [97.0, 40574.0], [97.1, 40652.0], [97.2, 40676.0], [97.3, 40695.0], [97.4, 40734.0], [97.5, 40762.0], [97.6, 40794.0], [97.7, 40897.0], [97.8, 40937.0], [97.9, 40991.0], [98.0, 41078.0], [98.1, 41148.0], [98.2, 41215.0], [98.3, 41370.0], [98.4, 41804.0], [98.5, 41949.0], [98.6, 42492.0], [98.7, 42838.0], [98.8, 42932.0], [98.9, 43240.0], [99.0, 43536.0], [99.1, 43709.0], [99.2, 43954.0], [99.3, 44761.0], [99.4, 45087.0], [99.5, 45352.0], [99.6, 46506.0], [99.7, 48578.0], [99.8, 50547.0], [99.9, 52833.0]], "isOverall": false, "label": "conf #1 req", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 629.0, "series": [{"data": [[0.0, 214.0], [100.0, 12.0], [32900.0, 6.0], [34500.0, 21.0], [33700.0, 10.0], [35300.0, 21.0], [36100.0, 17.0], [37700.0, 7.0], [38500.0, 7.0], [36900.0, 22.0], [40100.0, 10.0], [40900.0, 37.0], [39300.0, 33.0], [42500.0, 4.0], [41700.0, 3.0], [44900.0, 1.0], [45700.0, 1.0], [46500.0, 4.0], [50500.0, 3.0], [200.0, 72.0], [300.0, 93.0], [400.0, 106.0], [500.0, 82.0], [700.0, 147.0], [1000.0, 25.0], [1100.0, 520.0], [1200.0, 39.0], [1300.0, 32.0], [1400.0, 20.0], [1500.0, 17.0], [1600.0, 10.0], [1700.0, 21.0], [1800.0, 13.0], [1900.0, 302.0], [2000.0, 23.0], [2100.0, 11.0], [2200.0, 11.0], [2300.0, 11.0], [2400.0, 12.0], [2500.0, 5.0], [2600.0, 21.0], [2800.0, 12.0], [2700.0, 9.0], [2900.0, 33.0], [3000.0, 7.0], [3100.0, 3.0], [3200.0, 10.0], [3300.0, 4.0], [3400.0, 6.0], [3500.0, 109.0], [3700.0, 14.0], [3600.0, 12.0], [3800.0, 45.0], [3900.0, 7.0], [4000.0, 22.0], [4200.0, 52.0], [4100.0, 17.0], [4300.0, 1.0], [4500.0, 27.0], [4600.0, 1.0], [4400.0, 4.0], [4800.0, 18.0], [4700.0, 7.0], [5100.0, 39.0], [4900.0, 2.0], [5000.0, 2.0], [5300.0, 34.0], [5200.0, 38.0], [5500.0, 39.0], [5600.0, 39.0], [5400.0, 10.0], [5800.0, 95.0], [5700.0, 94.0], [5900.0, 65.0], [6000.0, 31.0], [6100.0, 40.0], [6200.0, 10.0], [6300.0, 64.0], [6400.0, 26.0], [6500.0, 59.0], [6600.0, 113.0], [6900.0, 22.0], [6800.0, 12.0], [6700.0, 47.0], [7100.0, 36.0], [7000.0, 118.0], [7300.0, 60.0], [7400.0, 93.0], [7200.0, 23.0], [7500.0, 73.0], [7600.0, 148.0], [7900.0, 209.0], [7700.0, 212.0], [7800.0, 629.0], [8100.0, 96.0], [8000.0, 144.0], [8600.0, 123.0], [8400.0, 212.0], [8200.0, 148.0], [9000.0, 77.0], [9200.0, 415.0], [8800.0, 161.0], [9400.0, 420.0], [9600.0, 42.0], [10200.0, 311.0], [10000.0, 286.0], [9800.0, 26.0], [10600.0, 164.0], [10400.0, 187.0], [11200.0, 52.0], [11000.0, 65.0], [10800.0, 47.0], [11600.0, 53.0], [11400.0, 31.0], [12200.0, 3.0], [11800.0, 42.0], [12000.0, 63.0], [12600.0, 20.0], [12400.0, 31.0], [13200.0, 80.0], [12800.0, 9.0], [13000.0, 37.0], [13800.0, 48.0], [13400.0, 297.0], [13600.0, 238.0], [14000.0, 110.0], [14200.0, 33.0], [14800.0, 10.0], [14400.0, 5.0], [14600.0, 13.0], [15000.0, 6.0], [15200.0, 6.0], [15600.0, 12.0], [15400.0, 7.0], [15800.0, 7.0], [16000.0, 10.0], [16200.0, 5.0], [17200.0, 24.0], [16400.0, 8.0], [16800.0, 44.0], [18000.0, 16.0], [18400.0, 17.0], [17600.0, 7.0], [19200.0, 13.0], [18800.0, 15.0], [19600.0, 10.0], [20400.0, 5.0], [20000.0, 6.0], [20800.0, 15.0], [21200.0, 22.0], [21600.0, 10.0], [22400.0, 13.0], [22000.0, 31.0], [22800.0, 61.0], [23200.0, 14.0], [24000.0, 39.0], [24400.0, 22.0], [23600.0, 143.0], [25200.0, 35.0], [24800.0, 10.0], [26000.0, 28.0], [25600.0, 26.0], [26400.0, 22.0], [26800.0, 30.0], [27200.0, 105.0], [27600.0, 42.0], [28000.0, 29.0], [28400.0, 36.0], [29200.0, 16.0], [29600.0, 17.0], [28800.0, 25.0], [30000.0, 10.0], [30400.0, 28.0], [31200.0, 13.0], [30800.0, 31.0], [31600.0, 7.0], [32000.0, 3.0], [32400.0, 24.0], [32800.0, 56.0], [34400.0, 36.0], [33600.0, 11.0], [35200.0, 24.0], [36800.0, 8.0], [36000.0, 18.0], [37600.0, 5.0], [38400.0, 8.0], [40800.0, 21.0], [40000.0, 13.0], [39200.0, 38.0], [42400.0, 8.0], [41600.0, 8.0], [43200.0, 14.0], [44800.0, 3.0], [44000.0, 2.0], [45600.0, 1.0], [47200.0, 1.0], [52800.0, 17.0], [51200.0, 6.0], [53600.0, 2.0], [34700.0, 41.0], [33100.0, 11.0], [33900.0, 20.0], [36300.0, 16.0], [35500.0, 14.0], [37900.0, 10.0], [38700.0, 7.0], [37100.0, 9.0], [39500.0, 14.0], [40300.0, 1.0], [42700.0, 6.0], [41900.0, 9.0], [41100.0, 31.0], [43500.0, 10.0], [46700.0, 1.0], [45100.0, 3.0], [49100.0, 1.0], [16900.0, 19.0], [16500.0, 5.0], [17300.0, 10.0], [18100.0, 4.0], [17700.0, 35.0], [19300.0, 13.0], [18500.0, 31.0], [18900.0, 15.0], [19700.0, 23.0], [20100.0, 7.0], [20500.0, 23.0], [21300.0, 45.0], [20900.0, 13.0], [22500.0, 18.0], [22100.0, 35.0], [21700.0, 31.0], [23300.0, 12.0], [22900.0, 53.0], [24500.0, 18.0], [23700.0, 119.0], [24100.0, 97.0], [24900.0, 7.0], [25300.0, 31.0], [25700.0, 42.0], [26100.0, 21.0], [26500.0, 52.0], [26900.0, 27.0], [27300.0, 70.0], [28500.0, 33.0], [27700.0, 35.0], [28100.0, 26.0], [28900.0, 21.0], [29300.0, 27.0], [30500.0, 61.0], [30100.0, 16.0], [29700.0, 30.0], [31300.0, 16.0], [30900.0, 20.0], [31700.0, 21.0], [32500.0, 17.0], [32100.0, 15.0], [34600.0, 44.0], [33800.0, 16.0], [33000.0, 19.0], [35400.0, 55.0], [36200.0, 11.0], [37800.0, 4.0], [38600.0, 42.0], [37000.0, 15.0], [40200.0, 9.0], [39400.0, 29.0], [41000.0, 26.0], [41800.0, 15.0], [42600.0, 2.0], [45000.0, 12.0], [44200.0, 5.0], [47400.0, 3.0], [51400.0, 1.0], [33300.0, 69.0], [34100.0, 37.0], [36500.0, 33.0], [35700.0, 5.0], [34900.0, 44.0], [38100.0, 32.0], [37300.0, 15.0], [38900.0, 23.0], [40500.0, 23.0], [39700.0, 19.0], [42900.0, 8.0], [41300.0, 9.0], [43700.0, 12.0], [44500.0, 7.0], [46100.0, 2.0], [45300.0, 14.0], [48500.0, 9.0], [49300.0, 1.0], [51700.0, 1.0], [8700.0, 100.0], [8500.0, 164.0], [8300.0, 77.0], [8900.0, 105.0], [9100.0, 185.0], [9500.0, 36.0], [9700.0, 57.0], [9300.0, 297.0], [10100.0, 518.0], [9900.0, 137.0], [10300.0, 197.0], [10700.0, 169.0], [10500.0, 185.0], [11100.0, 191.0], [10900.0, 32.0], [11300.0, 135.0], [11700.0, 46.0], [11500.0, 3.0], [12100.0, 28.0], [11900.0, 28.0], [12300.0, 12.0], [12700.0, 25.0], [12500.0, 20.0], [13100.0, 78.0], [13300.0, 142.0], [12900.0, 37.0], [13700.0, 170.0], [13500.0, 485.0], [13900.0, 48.0], [14100.0, 58.0], [14300.0, 9.0], [14500.0, 2.0], [14700.0, 6.0], [15100.0, 3.0], [15300.0, 7.0], [14900.0, 5.0], [15500.0, 13.0], [15700.0, 8.0], [16300.0, 6.0], [15900.0, 6.0], [16100.0, 1.0], [17000.0, 27.0], [16600.0, 10.0], [17400.0, 25.0], [18200.0, 20.0], [17800.0, 19.0], [19000.0, 38.0], [19400.0, 12.0], [18600.0, 20.0], [19800.0, 7.0], [20200.0, 2.0], [20600.0, 18.0], [21000.0, 16.0], [21400.0, 71.0], [21800.0, 31.0], [22200.0, 49.0], [23400.0, 54.0], [23000.0, 62.0], [22600.0, 28.0], [24200.0, 58.0], [23800.0, 73.0], [24600.0, 24.0], [25000.0, 17.0], [25400.0, 10.0], [26600.0, 36.0], [25800.0, 29.0], [26200.0, 46.0], [27000.0, 87.0], [27400.0, 64.0], [28200.0, 54.0], [28600.0, 19.0], [27800.0, 27.0], [29000.0, 15.0], [29400.0, 32.0], [30600.0, 59.0], [30200.0, 15.0], [29800.0, 13.0], [31400.0, 21.0], [31000.0, 31.0], [32600.0, 5.0], [31800.0, 30.0], [32200.0, 4.0], [34000.0, 30.0], [34800.0, 25.0], [33200.0, 10.0], [35600.0, 19.0], [36400.0, 26.0], [38000.0, 10.0], [37200.0, 6.0], [38800.0, 24.0], [39600.0, 7.0], [40400.0, 17.0], [42800.0, 17.0], [41200.0, 13.0], [42000.0, 1.0], [43600.0, 7.0], [44400.0, 2.0], [46800.0, 1.0], [45200.0, 3.0], [48400.0, 2.0], [50800.0, 2.0], [51600.0, 1.0], [34300.0, 19.0], [33500.0, 26.0], [35900.0, 17.0], [36700.0, 57.0], [35100.0, 88.0], [37500.0, 12.0], [38300.0, 26.0], [39100.0, 47.0], [39900.0, 31.0], [40700.0, 64.0], [42300.0, 1.0], [41500.0, 2.0], [43100.0, 10.0], [43900.0, 8.0], [44700.0, 8.0], [46300.0, 1.0], [45500.0, 7.0], [49500.0, 9.0], [51100.0, 4.0], [51900.0, 1.0], [17100.0, 18.0], [16700.0, 20.0], [17900.0, 27.0], [18300.0, 23.0], [17500.0, 13.0], [18700.0, 17.0], [19100.0, 9.0], [19500.0, 92.0], [19900.0, 14.0], [20300.0, 11.0], [20700.0, 12.0], [21500.0, 39.0], [21100.0, 15.0], [22300.0, 28.0], [21900.0, 35.0], [23500.0, 85.0], [23100.0, 53.0], [22700.0, 49.0], [23900.0, 31.0], [24300.0, 19.0], [25100.0, 30.0], [24700.0, 15.0], [25500.0, 8.0], [26300.0, 22.0], [25900.0, 135.0], [26700.0, 36.0], [27100.0, 107.0], [27500.0, 53.0], [27900.0, 41.0], [28300.0, 39.0], [28700.0, 26.0], [29100.0, 13.0], [29500.0, 9.0], [30700.0, 71.0], [30300.0, 26.0], [29900.0, 17.0], [31100.0, 24.0], [31500.0, 32.0], [31900.0, 5.0], [32700.0, 14.0], [32300.0, 12.0], [34200.0, 23.0], [33400.0, 21.0], [35800.0, 16.0], [35000.0, 70.0], [36600.0, 28.0], [37400.0, 13.0], [38200.0, 13.0], [39000.0, 46.0], [39800.0, 15.0], [40600.0, 48.0], [43000.0, 5.0], [41400.0, 5.0], [42200.0, 14.0], [43800.0, 10.0], [44600.0, 1.0], [45400.0, 6.0], [48600.0, 3.0], [49400.0, 3.0], [50200.0, 1.0], [51800.0, 1.0], [53400.0, 2.0]], "isOverall": false, "label": "conf #1 req", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 53600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 66.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 19934.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 66.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 19934.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 5.6923076923076925, "minX": 1.71714792E12, "maxY": 500.0, "series": [{"data": [[1.7171484E12, 493.272104607721], [1.7171481E12, 500.0], [1.71714846E12, 474.9262435677526], [1.71714864E12, 5.6923076923076925], [1.71714798E12, 500.0], [1.71714834E12, 499.9392778993435], [1.71714792E12, 268.7327394209357], [1.71714858E12, 214.6636986301374], [1.71714804E12, 500.0], [1.71714828E12, 500.0], [1.71714816E12, 500.0], [1.71714852E12, 409.8799293702176], [1.71714822E12, 500.0]], "isOverall": false, "label": "conf #1 users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71714864E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 33261.0, "series": [{"data": [[2.0, 1092.0], [3.0, 1165.857142857143], [4.0, 1327.5], [5.0, 1522.0], [6.0, 1267.6666666666667], [8.0, 1334.2], [9.0, 1374.5], [10.0, 1330.3333333333333], [11.0, 1253.0], [12.0, 1385.2], [13.0, 1178.0], [14.0, 1193.0], [15.0, 1120.0], [16.0, 1829.5], [17.0, 1503.6666666666667], [18.0, 1415.0], [19.0, 1295.0], [20.0, 1578.0], [21.0, 1565.2], [22.0, 1132.0], [24.0, 1480.142857142857], [25.0, 1435.6666666666667], [26.0, 1510.0], [27.0, 1331.8], [28.0, 1510.4285714285713], [29.0, 1103.0], [30.0, 1111.0], [31.0, 1807.5], [32.0, 1172.6666666666667], [33.0, 1939.2], [34.0, 1720.8], [35.0, 1130.2], [37.0, 1480.75], [36.0, 2000.0], [38.0, 1110.75], [39.0, 2005.2], [40.0, 1444.8333333333333], [41.0, 1070.0], [42.0, 1219.0], [43.0, 1881.6666666666667], [44.0, 1187.5], [46.0, 1803.909090909091], [47.0, 1270.6666666666667], [49.0, 1450.0], [48.0, 2777.3333333333335], [51.0, 2668.0], [52.0, 1827.3684210526317], [53.0, 1852.0], [54.0, 1911.2727272727273], [56.0, 1572.2], [57.0, 3175.8333333333335], [60.0, 1454.4999999999998], [61.0, 1241.0], [63.0, 3154.8571428571427], [67.0, 3685.2857142857147], [65.0, 3665.166666666667], [64.0, 3249.0], [68.0, 1831.4166666666667], [69.0, 2573.142857142857], [71.0, 2747.571428571429], [72.0, 1982.0000000000002], [73.0, 2461.1428571428573], [75.0, 2303.0], [74.0, 2740.5], [79.0, 2163.6666666666665], [76.0, 3601.875], [80.0, 4566.153846153847], [81.0, 3972.5], [84.0, 3879.8], [88.0, 3224.175], [89.0, 2399.0], [93.0, 4287.571428571429], [92.0, 3604.5], [97.0, 3030.8799999999997], [98.0, 2984.75], [107.0, 6692.133333333332], [111.0, 3714.810810810811], [110.0, 7477.285714285715], [109.0, 3508.0], [108.0, 7410.333333333332], [115.0, 6903.0], [114.0, 5860.8], [112.0, 4146.8], [119.0, 9180.0], [117.0, 7308.833333333333], [116.0, 6902.0], [123.0, 5251.0], [122.0, 9178.5], [121.0, 9178.571428571428], [120.0, 9179.111111111111], [126.0, 4254.574999999999], [127.0, 4276.0], [135.0, 6638.0], [134.0, 5248.4], [133.0, 5274.5], [132.0, 5258.5], [131.0, 8926.0], [130.0, 5795.428571428572], [129.0, 6283.857142857143], [143.0, 6601.333333333334], [140.0, 6630.5], [139.0, 6630.0], [137.0, 6634.636363636364], [146.0, 7441.75], [147.0, 5580.226415094341], [150.0, 8178.285714285713], [149.0, 6630.0], [145.0, 7353.8], [144.0, 6629.2], [158.0, 7479.0], [152.0, 7473.25], [165.0, 7448.642857142857], [166.0, 6989.0], [164.0, 7404.0], [163.0, 7553.428571428571], [162.0, 7539.0], [161.0, 7483.166666666666], [160.0, 7505.062500000001], [169.0, 5780.808510638298], [182.0, 9343.827586206895], [181.0, 7461.400000000001], [180.0, 7500.0], [179.0, 7449.6], [177.0, 7500.0], [186.0, 7890.594594594595], [187.0, 7899.25], [185.0, 7587.333333333333], [184.0, 7680.0], [194.0, 6398.195652173913], [195.0, 6468.846153846154], [196.0, 12629.333333333334], [193.0, 7672.739130434784], [192.0, 7672.0], [207.0, 1.0], [204.0, 8945.333333333334], [201.0, 6816.0], [200.0, 15383.588235294115], [214.0, 9814.625000000002], [215.0, 8887.75], [213.0, 8896.0], [220.0, 9226.400000000001], [218.0, 9355.916666666668], [217.0, 8899.0], [216.0, 8896.5], [219.0, 8953.5], [228.0, 8064.727272727273], [230.0, 6930.310344827588], [231.0, 7827.0], [229.0, 10076.0], [225.0, 14064.157894736842], [227.0, 15766.333333333336], [226.0, 13787.333333333334], [239.0, 13910.142857142857], [238.0, 9972.666666666666], [236.0, 9971.8], [235.0, 13132.75], [234.0, 12083.75], [233.0, 10910.8], [247.0, 18417.0], [246.0, 16359.714285714288], [245.0, 15084.692307692307], [244.0, 9989.0], [243.0, 10077.749999999998], [242.0, 9989.833333333334], [241.0, 10878.4], [240.0, 11092.75], [249.0, 3.0], [254.0, 12783.25], [255.0, 13286.5], [253.0, 15487.25], [252.0, 13542.142857142859], [250.0, 14884.75], [248.0, 13315.333333333334], [271.0, 9237.999999999998], [262.0, 1380.0], [261.0, 9252.066666666668], [263.0, 11422.90909090909], [264.0, 12581.968749999998], [265.0, 8375.839285714284], [267.0, 6136.72], [266.0, 11347.5], [270.0, 5748.0], [269.0, 11917.76], [268.0, 12441.0], [259.0, 9352.0], [257.0, 9304.25], [286.0, 16702.78947368421], [279.0, 16355.875], [273.0, 17396.0], [275.0, 22703.0], [274.0, 14558.722222222219], [287.0, 2367.0], [285.0, 18450.235294117643], [284.0, 21311.0], [283.0, 21923.72727272727], [281.0, 2385.0], [280.0, 3457.0], [278.0, 12547.375], [277.0, 19822.333333333332], [276.0, 20605.8], [302.0, 13551.0], [295.0, 9498.666666666666], [289.0, 7887.0], [288.0, 7886.0], [291.0, 7983.533333333333], [290.0, 7927.333333333334], [303.0, 13551.400000000001], [301.0, 17325.642857142855], [300.0, 18649.0], [298.0, 8780.0], [297.0, 8779.666666666666], [296.0, 8779.363636363638], [294.0, 12819.8125], [293.0, 9486.142857142855], [316.0, 10869.833333333336], [312.0, 13255.304347826088], [304.0, 6456.0], [307.0, 19047.0], [305.0, 12471.0], [313.0, 12449.8], [314.0, 10558.674418604649], [317.0, 21886.222222222223], [315.0, 15744.833333333332], [310.0, 17729.875], [309.0, 16905.75], [308.0, 17542.0], [320.0, 21932.444444444445], [329.0, 17477.545454545452], [334.0, 8174.0], [332.0, 15959.869565217394], [322.0, 30652.2], [321.0, 18918.5], [328.0, 7999.0], [327.0, 18879.0], [326.0, 9286.0], [325.0, 9449.0], [324.0, 23898.69230769231], [351.0, 17336.688888888893], [337.0, 6177.0], [343.0, 13570.695652173907], [336.0, 8288.200000000003], [344.0, 14625.95], [345.0, 7058.0], [346.0, 10397.178571428572], [347.0, 8231.974358974361], [350.0, 16830.333333333332], [339.0, 14296.222222222223], [338.0, 8287.0], [342.0, 5903.75], [341.0, 9788.222222222223], [354.0, 4808.0], [362.0, 17926.78947368421], [367.0, 10480.999999999998], [366.0, 10518.153846153848], [365.0, 14256.555555555553], [360.0, 22532.70454545455], [359.0, 17056.0], [352.0, 8447.0], [383.0, 17841.968749999996], [370.0, 7598.571428571428], [368.0, 12649.5], [371.0, 21270.15909090909], [379.0, 13828.037037037038], [382.0, 10219.000000000002], [381.0, 0.0], [378.0, 14084.88679245283], [377.0, 18541.42857142857], [376.0, 401.0], [375.0, 401.8], [374.0, 414.11111111111114], [373.0, 3886.0], [372.0, 11058.0], [399.0, 22485.666666666668], [387.0, 7995.333333333333], [391.0, 23542.0], [384.0, 19018.777777777777], [386.0, 7944.428571428572], [385.0, 10391.263157894737], [390.0, 16895.979166666664], [388.0, 13763.0], [395.0, 22461.925925925923], [398.0, 18142.71428571429], [397.0, 21041.125], [396.0, 33261.0], [394.0, 13985.857142857143], [393.0, 12840.062500000002], [392.0, 10680.75], [413.0, 12184.666666666666], [404.0, 10697.0], [407.0, 12648.533333333327], [408.0, 23773.84615384615], [412.0, 12269.813559322038], [403.0, 9266.0], [402.0, 9266.0], [401.0, 9266.0], [400.0, 9275.3], [415.0, 31250.875], [414.0, 25392.363636363636], [411.0, 6564.3], [406.0, 17540.571428571428], [429.0, 18957.241935483875], [420.0, 12832.695652173914], [431.0, 2566.7000000000003], [427.0, 18220.352941176472], [426.0, 18381.2], [425.0, 16010.0], [423.0, 30077.78947368421], [417.0, 14254.322580645161], [416.0, 10191.100000000002], [419.0, 12981.0], [418.0, 15042.884615384615], [422.0, 213.0], [421.0, 15501.0], [445.0, 10180.4693877551], [432.0, 15888.947368421057], [433.0, 10110.82978723404], [437.0, 3190.6666666666665], [436.0, 16020.444444444445], [439.0, 26290.34146341462], [438.0, 16164.41935483871], [441.0, 15659.17605633803], [442.0, 8397.586206896553], [443.0, 14280.833333333332], [446.0, 2990.769230769231], [447.0, 10031.1], [440.0, 12801.916666666666], [444.0, 6668.5], [435.0, 15940.224137931033], [462.0, 20167.69902912621], [454.0, 12218.525000000001], [453.0, 19801.0294117647], [452.0, 14142.285714285714], [460.0, 15778.181818181814], [461.0, 19641.0], [459.0, 16732.1], [458.0, 10260.4], [457.0, 23434.399999999998], [456.0, 25124.47222222222], [455.0, 19069.846153846152], [448.0, 10030.866666666667], [451.0, 17998.0], [450.0, 30021.0], [478.0, 15352.294117647058], [470.0, 22212.333333333332], [469.0, 13297.897727272728], [468.0, 21020.725000000006], [471.0, 19605.176470588238], [465.0, 32474.125000000007], [464.0, 10116.838709677419], [467.0, 14258.0], [466.0, 13897.041666666664], [479.0, 12498.437499999998], [477.0, 10154.411764705881], [476.0, 11101.25], [475.0, 25535.228571428575], [474.0, 15568.567010309274], [473.0, 17992.106382978724], [472.0, 13212.5], [494.0, 19028.767955801093], [486.0, 11278.95774647887], [485.0, 17008.900355871894], [484.0, 10763.275862068966], [487.0, 17733.779116465856], [480.0, 13849.48484848485], [483.0, 20420.904564315348], [482.0, 18853.578431372556], [495.0, 16201.283018867922], [489.0, 16467.75675675675], [488.0, 4221.222222222223], [493.0, 17116.90789473684], [492.0, 20652.347826086952], [491.0, 15827.074285714289], [490.0, 13597.711111111113], [496.0, 17632.30967741937], [500.0, 17273.7386486712], [499.0, 13773.844961240307], [498.0, 16780.40740740741], [497.0, 16104.246753246753], [1.0, 1070.0]], "isOverall": false, "label": "conf #1 req", "isController": false}, {"data": [[452.55764999999985, 16027.426950000008]], "isOverall": false, "label": "conf #1 req-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 67.16666666666667, "minX": 1.71714792E12, "maxY": 19395.316666666666, "series": [{"data": [[1.7171484E12, 16324.883333333333], [1.7171481E12, 16394.533333333333], [1.71714846E12, 16414.816666666666], [1.71714864E12, 100.1], [1.71714798E12, 17060.733333333334], [1.71714834E12, 19395.316666666666], [1.71714792E12, 7208.766666666666], [1.71714858E12, 6894.3], [1.71714804E12, 18549.15], [1.71714828E12, 16934.016666666666], [1.71714816E12, 18409.566666666666], [1.71714852E12, 14331.35], [1.71714822E12, 18554.166666666668]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7171484E12, 3482.3333333333335], [1.7171481E12, 3603.75], [1.71714846E12, 3880.1666666666665], [1.71714864E12, 67.16666666666667], [1.71714798E12, 3833.6666666666665], [1.71714834E12, 3913.75], [1.71714792E12, 3348.0], [1.71714858E12, 3689.0], [1.71714804E12, 3955.0833333333335], [1.71714828E12, 3598.5833333333335], [1.71714816E12, 3642.5], [1.71714852E12, 3875.0], [1.71714822E12, 3575.3333333333335]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71714864E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1278.3076923076922, "minX": 1.71714792E12, "maxY": 18370.001211387014, "series": [{"data": [[1.7171484E12, 16781.86114570362], [1.7171481E12, 18370.001211387014], [1.71714846E12, 17588.443110348766], [1.71714864E12, 1278.3076923076922], [1.71714798E12, 16803.740125930126], [1.71714834E12, 17420.314004376385], [1.71714792E12, 7905.129918337042], [1.71714858E12, 10552.484246575343], [1.71714804E12, 16376.107456140335], [1.71714828E12, 17647.411198073456], [1.71714816E12, 16778.164719626144], [1.71714852E12, 16294.167157151274], [1.71714822E12, 17530.705325443756]], "isOverall": false, "label": "conf #1 req", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71714864E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1278.3076923076922, "minX": 1.71714792E12, "maxY": 16706.251362810424, "series": [{"data": [[1.7171484E12, 15388.943337484441], [1.7171481E12, 16706.251362810424], [1.71714846E12, 16320.300171526593], [1.71714864E12, 1278.3076923076922], [1.71714798E12, 15115.517458500288], [1.71714834E12, 16127.881291028429], [1.71714792E12, 7698.23682256867], [1.71714858E12, 10437.063698630118], [1.71714804E12, 14665.543311403504], [1.71714828E12, 16050.097531607464], [1.71714816E12, 15278.020443925237], [1.71714852E12, 15215.061212477944], [1.71714822E12, 16116.487573964525]], "isOverall": false, "label": "conf #1 req", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71714864E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.71714792E12, "maxY": 4823.435502958571, "series": [{"data": [[1.7171484E12, 3833.1650062266485], [1.7171481E12, 4576.774682010905], [1.71714846E12, 3928.3339050886193], [1.71714864E12, 0.0], [1.71714798E12, 3733.795649685176], [1.71714834E12, 4479.981947483584], [1.71714792E12, 8.397178916109878], [1.71714858E12, 144.41506849315059], [1.71714804E12, 3785.3448464912317], [1.71714828E12, 4509.965081276344], [1.71714816E12, 4142.053154205605], [1.71714852E12, 2739.9693937610346], [1.71714822E12, 4823.435502958571]], "isOverall": false, "label": "conf #1 req", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71714864E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1035.0, "minX": 1.71714792E12, "maxY": 1198.0, "series": [{"data": [[1.71714864E12, 1145.0], [1.71714792E12, 1198.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.71714864E12, 1070.0], [1.71714792E12, 1035.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.71714864E12, 1145.0], [1.71714792E12, 1187.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.71714864E12, 1145.0], [1.71714792E12, 1198.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.71714864E12, 1113.0], [1.71714792E12, 1126.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.71714864E12, 1145.0], [1.71714792E12, 1197.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71714864E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 503.0, "minX": 1.0, "maxY": 34224.0, "series": [{"data": [[33.0, 1185.0], [2.0, 1102.5], [19.0, 1102.5], [10.0, 1167.0], [24.0, 1095.0], [3.0, 1145.0], [13.0, 1117.5], [28.0, 1111.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 25372.5], [3.0, 16713.0], [4.0, 1907.0], [5.0, 15176.5], [6.0, 1903.0], [7.0, 1907.0], [8.0, 1109.0], [9.0, 1105.0], [10.0, 1107.0], [11.0, 1104.0], [12.0, 3506.0], [13.0, 1265.0], [14.0, 1907.0], [15.0, 1907.0], [16.0, 1105.0], [17.0, 1906.0], [18.0, 1107.0], [19.0, 2107.0], [20.0, 1105.0], [21.0, 1106.0], [22.0, 28320.0], [23.0, 1909.0], [24.0, 1110.0], [25.0, 1911.0], [26.0, 503.0], [27.0, 2372.5], [28.0, 1334.5], [29.0, 3249.5], [30.0, 13109.5], [31.0, 3871.0], [33.0, 1760.0], [32.0, 7985.0], [34.0, 26577.5], [37.0, 30447.0], [38.0, 12428.0], [39.0, 22056.0], [41.0, 31055.0], [40.0, 10715.0], [42.0, 5516.5], [45.0, 13566.0], [44.0, 15038.5], [47.0, 10055.0], [46.0, 13723.0], [49.0, 10186.0], [48.0, 17931.0], [51.0, 11796.0], [50.0, 7818.0], [53.0, 10141.0], [54.0, 19755.0], [56.0, 22280.0], [57.0, 23528.0], [58.0, 34224.0], [59.0, 10246.5], [61.0, 13756.5], [60.0, 11230.0], [70.0, 11155.0], [69.0, 7112.0], [68.0, 25145.5], [71.0, 6800.5], [75.0, 11184.0], [72.0, 10415.0], [74.0, 8602.0], [77.0, 9772.0], [76.0, 11385.0], [79.0, 10469.0], [80.0, 14224.0], [83.0, 10632.5], [82.0, 10920.0], [81.0, 10321.0], [87.0, 8864.0], [85.0, 10190.0], [84.0, 18008.5], [86.0, 9331.0], [88.0, 9365.0], [90.0, 9264.0], [89.0, 9294.0], [91.0, 9438.0], [95.0, 8454.0], [93.0, 8638.0], [92.0, 13499.0], [97.0, 7763.5], [99.0, 13542.0], [96.0, 17735.0], [98.0, 13464.0], [101.0, 13230.0], [102.0, 13527.0], [100.0, 19265.0], [103.0, 13530.0], [104.0, 10229.0], [107.0, 13467.0], [105.0, 23561.0], [109.0, 10781.0], [110.0, 13454.0], [111.0, 10080.0], [114.0, 12110.0], [119.0, 10466.0], [117.0, 13821.0], [116.0, 13763.0], [118.0, 12806.5], [120.0, 20823.5], [123.0, 16426.0], [127.0, 11826.0], [125.0, 11107.0], [131.0, 11237.0], [133.0, 11819.0], [128.0, 13933.0], [130.0, 14197.0], [135.0, 13515.0], [129.0, 9480.0], [139.0, 13593.0], [136.0, 13701.0], [138.0, 13630.0], [149.0, 24299.0], [145.0, 12981.0], [1.0, 12207.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 149.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 34224.0, "series": [{"data": [[33.0, 1185.0], [2.0, 1102.5], [19.0, 1102.5], [10.0, 1167.0], [24.0, 1095.0], [3.0, 1145.0], [13.0, 1117.5], [28.0, 1111.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 0.0], [3.0, 0.0], [4.0, 0.0], [5.0, 0.0], [6.0, 0.0], [7.0, 0.0], [8.0, 0.0], [9.0, 0.0], [10.0, 0.0], [11.0, 0.0], [12.0, 0.0], [13.0, 0.0], [14.0, 0.0], [15.0, 0.0], [16.0, 0.0], [17.0, 0.0], [18.0, 0.0], [19.0, 0.0], [20.0, 0.0], [21.0, 0.0], [22.0, 28320.0], [23.0, 0.0], [24.0, 0.0], [25.0, 0.0], [26.0, 0.0], [27.0, 2216.0], [28.0, 1303.5], [29.0, 3171.0], [30.0, 0.0], [31.0, 3871.0], [33.0, 1640.0], [32.0, 6259.0], [34.0, 26577.5], [37.0, 30447.0], [38.0, 12428.0], [39.0, 21752.0], [41.0, 31055.0], [40.0, 10715.0], [42.0, 4605.5], [45.0, 13565.0], [44.0, 13642.0], [47.0, 9985.0], [46.0, 12243.5], [49.0, 10185.0], [48.0, 17921.0], [51.0, 11796.0], [50.0, 7818.0], [53.0, 7365.0], [54.0, 19755.0], [56.0, 22279.5], [57.0, 23528.0], [58.0, 34224.0], [59.0, 10244.0], [61.0, 13756.0], [60.0, 9196.5], [70.0, 11155.0], [69.0, 7073.0], [68.0, 25145.0], [71.0, 6800.0], [75.0, 11184.0], [72.0, 10415.0], [74.0, 8602.0], [77.0, 9772.0], [76.0, 11385.0], [79.0, 10469.0], [80.0, 14224.0], [83.0, 10632.0], [82.0, 10462.0], [81.0, 10321.0], [87.0, 8864.0], [85.0, 10189.0], [84.0, 13145.0], [86.0, 9327.0], [88.0, 9266.5], [90.0, 9263.0], [89.0, 9274.0], [91.0, 9438.0], [95.0, 8454.0], [93.0, 8635.0], [92.0, 7912.0], [97.0, 7761.0], [99.0, 13542.0], [96.0, 15421.0], [98.0, 13463.0], [101.0, 12746.0], [102.0, 13527.0], [100.0, 19265.0], [103.0, 13529.0], [104.0, 10226.0], [107.0, 13466.0], [105.0, 23560.0], [109.0, 10781.0], [110.0, 13453.5], [111.0, 10080.0], [114.0, 12109.5], [119.0, 10405.0], [117.0, 13799.0], [116.0, 13763.0], [118.0, 12210.0], [120.0, 18913.0], [123.0, 15802.0], [127.0, 11826.0], [125.0, 11057.0], [131.0, 11236.0], [133.0, 9231.0], [128.0, 13933.0], [130.0, 14197.0], [135.0, 13515.0], [129.0, 9476.0], [139.0, 13593.0], [136.0, 13700.5], [138.0, 13529.0], [149.0, 24299.0], [145.0, 12981.0], [1.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 149.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.18333333333333332, "minX": 1.71714786E12, "maxY": 30.6, "series": [{"data": [[1.7171484E12, 26.55], [1.7171481E12, 27.383333333333333], [1.71714786E12, 0.18333333333333332], [1.71714846E12, 28.516666666666666], [1.71714864E12, 0.26666666666666666], [1.71714798E12, 29.2], [1.71714834E12, 30.466666666666665], [1.71714792E12, 30.6], [1.71714858E12, 18.866666666666667], [1.71714804E12, 30.316666666666666], [1.71714828E12, 27.666666666666668], [1.71714816E12, 28.666666666666668], [1.71714852E12, 26.483333333333334], [1.71714822E12, 28.166666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71714864E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.71714792E12, "maxY": 19.15, "series": [{"data": [[1.7171484E12, 16.266666666666666], [1.7171481E12, 17.566666666666666], [1.71714846E12, 18.316666666666666], [1.71714864E12, 0.43333333333333335], [1.71714798E12, 18.533333333333335], [1.71714834E12, 18.033333333333335], [1.71714792E12, 17.983333333333334], [1.71714858E12, 19.15], [1.71714804E12, 18.8], [1.71714828E12, 16.533333333333335], [1.71714816E12, 16.783333333333335], [1.71714852E12, 18.3], [1.71714822E12, 16.383333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.7171484E12, 6.2], [1.7171481E12, 5.683333333333334], [1.71714858E12, 4.65], [1.71714804E12, 6.716666666666667], [1.71714828E12, 6.683333333333334], [1.71714846E12, 6.716666666666667], [1.71714816E12, 6.716666666666667], [1.71714798E12, 6.2], [1.71714834E12, 7.216666666666667], [1.71714852E12, 6.7], [1.71714822E12, 6.683333333333334], [1.71714792E12, 3.6166666666666667]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.7171484E12, 0.05], [1.7171481E12, 0.11666666666666667], [1.71714804E12, 0.06666666666666667], [1.71714828E12, 0.11666666666666667], [1.71714846E12, 0.13333333333333333], [1.71714816E12, 0.13333333333333333], [1.71714798E12, 0.06666666666666667], [1.71714834E12, 0.06666666666666667], [1.71714852E12, 0.11666666666666667], [1.71714822E12, 0.11666666666666667]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}, {"data": [[1.7171484E12, 4.25], [1.7171481E12, 4.15], [1.71714858E12, 0.5333333333333333], [1.71714804E12, 4.816666666666666], [1.71714828E12, 4.35], [1.71714846E12, 3.9833333333333334], [1.71714816E12, 4.9], [1.71714798E12, 4.316666666666666], [1.71714834E12, 5.15], [1.71714852E12, 3.2], [1.71714822E12, 4.983333333333333], [1.71714792E12, 0.85]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71714864E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.71714792E12, "maxY": 30.466666666666665, "series": [{"data": [[1.7171484E12, 26.766666666666666], [1.7171481E12, 27.516666666666666], [1.71714846E12, 29.15], [1.71714864E12, 0.31666666666666665], [1.71714798E12, 29.116666666666667], [1.71714834E12, 30.466666666666665], [1.71714792E12, 21.466666666666665], [1.71714858E12, 24.333333333333332], [1.71714804E12, 30.4], [1.71714828E12, 27.683333333333334], [1.71714816E12, 28.533333333333335], [1.71714852E12, 28.316666666666666], [1.71714822E12, 28.166666666666668]], "isOverall": false, "label": "conf #1 req-failure", "isController": false}, {"data": [[1.71714864E12, 0.11666666666666667], [1.71714792E12, 0.9833333333333333]], "isOverall": false, "label": "conf #1 req-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71714864E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.71714792E12, "maxY": 30.466666666666665, "series": [{"data": [[1.71714864E12, 0.11666666666666667], [1.71714792E12, 0.9833333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.7171484E12, 26.766666666666666], [1.7171481E12, 27.516666666666666], [1.71714846E12, 29.15], [1.71714864E12, 0.31666666666666665], [1.71714798E12, 29.116666666666667], [1.71714834E12, 30.466666666666665], [1.71714792E12, 21.466666666666665], [1.71714858E12, 24.333333333333332], [1.71714804E12, 30.4], [1.71714828E12, 27.683333333333334], [1.71714816E12, 28.533333333333335], [1.71714852E12, 28.316666666666666], [1.71714822E12, 28.166666666666668]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71714864E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

